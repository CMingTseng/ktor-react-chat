{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","setState","text","target","value","handleSubmit","_this$state","state","socket","author","send","JSON","stringify","WebSocket","messages","onopen","console","log","onclose","onerror","onmessage","data","parse","type","concat","toConsumableArray","_this2","classes","react_default","a","createElement","className","index_es","container","justify","card","color","title","variant","gutterBottom","alignContent","map","message","index","myMessage","key","item","xs","style","flexShrink","notMyMessage","wrap","label","autoFocus","onChange","InputProps","disableUnderline","onClick","Send_default","paddingLeft","Component","withStyles","theme","minWidth","maxWidth","minHeight","maxHeight","overflowY","textField","marginLeft","spacing","unit","marginRight","borderRadius","backgroundColor","padding","margin","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.07925b84.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { Grid, Card, CardActions, CardContent, CardHeader, Typography, withStyles, TextField, Divider, Button } from '@material-ui/core'\nimport SendIcon from '@material-ui/icons/Send'\n\nconst styles = theme => ({\n    card: {\n        minWidth: 600,\n        maxWidth: 600\n    },\n    messages: {\n        minHeight: 250,\n        maxHeight: 250,\n        overflowY: 'auto'\n    },\n    textField: {\n        marginLeft: theme.spacing.unit,\n        marginRight: theme.spacing.unit\n    },\n    myMessage: {\n        borderRadius: 6,\n        backgroundColor: '#0084ff',\n        color: '#ffffff',\n        padding: 6,\n        margin: 2\n    },\n    notMyMessage: {\n        borderRadius: 6,\n        backgroundColor: '#f6f6f6',\n        padding: 6,\n        margin: 2\n    }\n})\n\nclass App extends Component {\n    constructor(props) {\n        super(props)\n\n        const socket = new WebSocket('ws://localhost:8080/chat')\n\n        this.state = {\n            messages: [\n                {\n                    author: 'not me',\n                    text: 'hello world'\n                },\n                {\n                    author: 'me',\n                    text: 'hello world'\n                }\n            ],\n            text: '',\n            author: 'me',\n            socket\n        }\n\n        socket.onopen = () => {\n            console.log('Succesfully connected to chat server at ws://localhost:8080/chat.')\n        }\n\n        socket.onclose = () => {\n            console.log('Goodbye!')\n        }\n\n        socket.onerror = () => {\n            console.log('Uh oh...')\n        }\n\n        socket.onmessage = event => {\n            console.log(event)\n            const data = JSON.parse(event.data)\n            const { type } = data\n            switch (type) {\n                case 'message':\n                    this.setState(state => ({\n                        messages: [...state.messages, { text: data.text, author: data.author }]\n                    }))\n                    break\n                case 'joinChat':\n                    this.setState(state => ({\n                        author: data.author\n                    }))\n                    break\n                default:\n                    break\n            }\n        }\n    }\n\n    handleChange = event => {\n        this.setState({\n            text: event.target.value\n        })\n    }\n\n    handleSubmit = () => {\n        const { socket, text, author } = this.state\n        socket.send(\n            JSON.stringify({\n                text,\n                author\n            })\n        )\n    }\n\n    render() {\n        const { classes } = this.props\n        return (\n            <div className=\"App\">\n                <Grid container justify=\"center\">\n                    <Card className={classes.card}>\n                        <CardHeader\n                            color=\"primary\"\n                            title={\n                                <Typography variant=\"display1\" gutterBottom>\n                                    Super Simple Chat\n                                </Typography>\n                            }\n                        />\n                        <Divider />\n                        <CardContent>\n                            <Grid className={classes.messages} container alignContent={'flex-end'}>\n                                {this.state.messages.map((message, index) => {\n                                    const myMessage = message.author === this.state.author\n                                    return (\n                                        <Grid key={index} container item xs={12} justify={myMessage ? 'flex-end' : 'flex-start'}>\n                                            <Grid item style={{ flexShrink: 1 }}>\n                                                <Typography\n                                                    variant=\"body1\"\n                                                    className={myMessage ? classes.myMessage : classes.notMyMessage}\n                                                >\n                                                    {message.text}\n                                                </Typography>\n                                            </Grid>\n                                        </Grid>\n                                    )\n                                })}\n                            </Grid>\n                        </CardContent>\n                        <Divider />\n                        <Grid container wrap=\"nowrap\">\n                            <Grid item>\n                                <TextField\n                                    label=\"Type a message...\"\n                                    autoFocus\n                                    className={classes.card}\n                                    value={this.state.text}\n                                    onChange={this.handleChange}\n                                    InputProps={{\n                                        disableUnderline: true\n                                    }}\n                                />\n                            </Grid>\n                            <Grid item>\n                                <Button variant=\"text\" onClick={() => this.handleSubmit()}>\n                                    Send\n                                    <SendIcon\n                                        style={{\n                                            paddingLeft: '6px',\n                                            color: '#0084ff'\n                                        }}\n                                    />\n                                </Button>\n                            </Grid>\n                        </Grid>\n                    </Card>\n                </Grid>\n            </div>\n        )\n    }\n}\n\nexport default withStyles(styles)(App)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}